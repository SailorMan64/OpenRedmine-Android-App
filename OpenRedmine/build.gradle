apply plugin: 'com.android.application'
android {
    //Apply versions
    def compile_version = System.getenv("ANDROID_COMPILE_SDK_VERSION") ?: "23"
    def build_tool_version = System.getenv("ANDROID_BUILD_TOOL_VERSION") ?: '26.0.2'
    def target_sdk_version =System.getenv("ANDROID_TARGET_SDK_VERSION") ?: "23"
    println "Compile SDK: $compile_version Tool version: $build_tool_version Target version: $target_sdk_version"

    //Make version code
    def version = System.getenv("TRAVIS_TAG") ?: ""
    if (version == "") {version = "${System.env.TRAVIS_BRANCH}-${System.env.TRAVIS_BUILD_NUMBER}"}
    else {version = version.replace("v", "")}
    if (version == "null-null") {version = "dev"}
    def version_code = System.getenv("TRAVIS_BUILD_NUMBER") ?: "0"

    println "Build version: $version ($version_code)"

    compileSdkVersion Integer.decode(compile_version)
    buildToolsVersion build_tool_version
    testBuildType "debug"
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion Integer.decode(target_sdk_version)

        versionCode Integer.decode(version_code)
        versionName version
        testApplicationId "jp.redmine.redmineclienttest"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        testHandleProfiling true
        testFunctionalTest true
        multiDexEnabled false

    }
    lintOptions {
        abortOnError true
    }
    signingConfigs {
        release
    }
    //productFlavors {
    //    lollipop {
    //        minSdkVersion 21
    //    }
    //}
    buildTypes {
        debug {
            debuggable true
            zipAlignEnabled true
            buildConfigField 'boolean', 'DEBUG_XML', 'false'
        }
        release {
            //runProguard true
            //proguardFile getDefaultProguardFile('proguard-android.txt')
            //proguardFile file('proguard-project.txt')

            debuggable false
            zipAlignEnabled true
            buildConfigField 'boolean', 'DEBUG_XML', 'false'
            if (project.hasProperty('keyAlias')) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    androidTestImplementation 'com.google.guava:guava:21.0'
    androidTestImplementation 'junit:junit:4.12'
    implementation 'com.android.support:support-v4:23.2.0'
    implementation 'com.android.support:appcompat-v7:23.2.0'
    implementation 'com.android.support:animated-vector-drawable:23.2.0'
    implementation 'com.android.support:design:23.2.0'
    implementation 'com.andreabaccega:android-form-edittext:1.2.1'
    implementation 'se.emilsjolander:stickylistheaders:2.7.0'
    implementation 'com.j256.ormlite:ormlite-core:4.48'
    implementation 'com.j256.ormlite:ormlite-android:4.48'
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'net.java:textile-j:2.2'
    implementation 'org.commonjava.googlecode.markdown4j:markdown4j:2.2-cj-1.0'
}

if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}


